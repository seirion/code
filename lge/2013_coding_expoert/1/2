#include <iostream>
#include <list>

#define _DEBUG

#ifdef _WIN32
    typedef unsigned __int64    uint64;
#elif defined (__linux__) || defined (__CYGWIN__)
    typedef unsigned long long  uint64;
#endif
typedef std::list<int> List;

using namespace std;

//////////////////////////////////////////////////////////
// function prototypes
void solve(int input[], int size);
void setInput(List list, int input[], int size);
void findOptimal(List list);
int calculateCost(List list);
int getMaxFlag(List list);
int getLeftValue(List list, uint64 flag);
int getRightValue(List list, uint64 flag);
int getValue(List list, uint64 flag, int match);


int _cost = 0;

int main()
{
    int input[] = {9,2,3,4,5};
    int size = 4;

    solve(input, size);
    return 0;
}


void solve(int input[], int size)
{
    List list;
    setInput(list, input, size);

    findOptimal(list);
}

void setInput(List list, int input[], int size)
{
    for (int i = 0; i < size; i++) list.push_back(input[i]);
    list.sort();
#ifdef _DEBUG
    for (List::iterator it = list.begin(); it != list.end(); it++) cout << (*it) << endl;
#endif
}


/**
 *
 * finish condition : the size of list is less than 2
 */
void findOptimal(List list)
{
    // 1. finish condition
    int size = list.size();
    if (size < 2) return;

    // 2. front == 1
    int front = list.front();
    if (front == 1) { 
        list.pop_front();
        int next = list.front();
        _cost += next;
        findOptimal(list);
        return;
    }

    // 3. else : devide into 2 lists
    _cost += calculateCost(list);

    uint64 flag = 1;
    uint64 optimalFlag = flag;
    const uint64 MAX_FLAG = getMaxFlag(list);
    List list1, list2;

    int currentCost = 0x7FFFFFFF;
    while (flag < MAX_FLAG) {
        int leftValue = getLeftValue(list, flag);
        int rightValue = getRightValue(list, flag);
        if (currentCost > abs(leftValue - rightValue)) {
            currentCost = abs(leftValue - rightValue);
            optimalFlag = flag;
        }
        flag++;
    }
#ifdef _DEBUG
    cout << "flag : " << flag << endl;
#endif

}


int calculateCost(List list)
{
    int cost = 1;
    List::iterator it = list.begin();
    for (; it != list.end(); it++) {
        cost *= (*it);
    }
    return cost;
}

int getMaxFlag(List list) {
    int size = list.size();
    int max = 0;
    for (int i = 0; i < size; i++) {
        max += 1 << (i+1);
    }
#ifdef _DEBUG
    cout << "max : " << max << endl;
#endif
    return max;
}

int getLeftValue(List list, uint64 flag)
{
    return getValue(list, flag, 1);
}

int getRightValue(List list, uint64 flag)
{
    return getValue(list, flag, 0);
}

int getValue(List list, uint64 flag, int match)
{
    int value = 0;
    List::iterator it = list.begin();
    for (int i = 0; it != list.end(); it++, i++) {
        if ((flag >> i) == match) {
            value += (*it);
        }
    }
    return value;
}
